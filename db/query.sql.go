// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO
    entry (id, name, origin, desc)
VALUES
    (?, ?, ?, ?) RETURNING id, name, origin, "desc"
`

type CreateEntryParams struct {
	ID     int64
	Name   string
	Origin string
	Desc   string
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry,
		arg.ID,
		arg.Name,
		arg.Origin,
		arg.Desc,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Origin,
		&i.Desc,
	)
	return i, err
}

const getEntries = `-- name: GetEntries :many
SELECT
    entry.id, entry.name, entry.origin, entry."desc"
FROM
    entry
ORDER BY
    id
`

type GetEntriesRow struct {
	Entry Entry
}

func (q *Queries) GetEntries(ctx context.Context) ([]GetEntriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEntriesRow
	for rows.Next() {
		var i GetEntriesRow
		if err := rows.Scan(
			&i.Entry.ID,
			&i.Entry.Name,
			&i.Entry.Origin,
			&i.Entry.Desc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntry = `-- name: GetEntry :one
SELECT
    entry.id, entry.name, entry.origin, entry."desc"
FROM
    entry
WHERE
    id = ?
LIMIT
    1
`

type GetEntryRow struct {
	Entry Entry
}

func (q *Queries) GetEntry(ctx context.Context, id int64) (GetEntryRow, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i GetEntryRow
	err := row.Scan(
		&i.Entry.ID,
		&i.Entry.Name,
		&i.Entry.Origin,
		&i.Entry.Desc,
	)
	return i, err
}
